import socket
import threading
from queue import Queue
from dataclasses import dataclass, field
import time
import numpy as np
import sounddevice as sd
from transformers import HfArgumentParser
from pythonosc import udp_client


@dataclass
class ListenAndPlayArguments:
    send_rate: int = field(default=16000, metadata={"help": "Taux d'√©chantillonnage en Hz (envoi)."})
    recv_rate: int = field(default=16000, metadata={"help": "Taux d'√©chantillonnage en Hz (r√©ception)."})
    list_play_chunk_size: int = field(
        default=1024,
        metadata={"help": "Taille des blocs (en frames). Par d√©faut 1024."},
    )
    host: str = field(
        default="localhost",
        metadata={"help": "Le nom d'h√¥te ou l'adresse IP pour l'envoi et la r√©ception."},
    )
    send_port: int = field(
        default=12345,
        metadata={"help": "Le port r√©seau pour l'envoi des donn√©es. Par d√©faut 12345."},
    )
    recv_port: int = field(
        default=12346,
        metadata={"help": "Le port r√©seau pour la r√©ception des donn√©es. Par d√©faut 12346."},
    )
    input_device_index: int = field(
        default=0,
        metadata={"help": "Index du p√©riph√©rique audio d'entr√©e."},
    )
    output_device_index: int = field(
        default=1,
        metadata={"help": "Index du p√©riph√©rique audio de sortie."},
    )
    input_channel: int = field(
        default=0,
        metadata={"help": "D√©calage canal entr√©e (non utilis√© ici, on lit 1 canal mono)."},
    )
    output_channel: int = field(
        default=0,
        metadata={"help": "D√©calage canal sortie (0 => on √©crit dans [0], 1 => [1], etc.)."},
    )
    enable_osc: bool = field(
        default=False,
        metadata={"help": "Enable OSC"},
    )
    osc_ip: str = field(
        default="127.0.0.1",
        metadata={"help": "Le nom d'h√¥te ou l'adresse IP pour l'envoi OSC"},
    )
    osc_port: int = field(
        default=8000,
        metadata={"help": "Le port r√©seau pour l'envoi des donn√©es OSC. Par d√©faut 8000."},
    )



def listen_and_play(
    send_rate=16000,
    recv_rate=16000,
    list_play_chunk_size=1024,
    host="localhost",
    send_port=12345,
    recv_port=12346,
    input_device_index=0,
    output_device_index=1,
    input_channel=0,    # Modifi√© pour compatibilit√© avec mono
    output_channel=0,
    enable_osc=False,
    osc_ip="127.0.0.1",
    osc_port=8000
):
    """
    Ouvre 1 canal en entr√©e (mono) et 'nb_output_channels = output_channel + 1' en sortie.
    On place le flux mono re√ßu dans le canal [output_channel].
    Fonctionne avec des versions anciennes de sounddevice (pas de param 'mapping').
    """

    stop_event = threading.Event()
    recv_queue = Queue()
    send_queue = Queue()

    # On ouvre suffisamment de canaux en sortie pour pouvoir "poser" notre mono
    nb_output_channels = output_channel + 1  # p. ex. 2 si output_channel=1
    nb_input_channels = input_channel + 1  # p. ex. 2 si output_channel=1

    if enable_osc:
        osc_client = udp_client.SimpleUDPClient(osc_ip, osc_port)

    bot_state = {"talking": False}

    # --- Callback de sortie (lecture) ---
    def callback_recv(outdata, frames, time_info, status):
        """
        R√©cup√®re un bloc mono (frames * 1 canal * 2 octets) de recv_queue et
        le place dans [output_channel].
        """
        if not recv_queue.empty():
            data = recv_queue.get()
            if data is not None:
                data_np = np.frombuffer(data, dtype=np.int16)
                # On s'attend √† frames*1 √©chantillon (mono)
                if len(data_np) == frames * 1:
                    data_np = data_np.reshape((frames, 1))
                else:
                    # S'il y a un √©cart (rare), on s'assure de reshaper proprement
                    data_np = data_np[: frames]
                    data_np = np.pad(data_np, (0, frames - len(data_np)), mode='constant')
                    data_np = data_np.reshape((frames, 1))

                # Pr√©pare un tampon (frames, nb_output_channels) √† z√©ro
                tmp = np.zeros((frames, nb_output_channels), dtype=np.int16)
                # Place le mono dans [output_channel]
                tmp[:, output_channel:output_channel+1] = data_np

                outdata[:] = tmp.tobytes()
                if not bot_state["talking"]:
                    print("üîä Sound started streaming")
                    bot_state["talking"] = True
                    if enable_osc:
                        print("sending message")
                        osc_client.send_message("/listen_and_play/bot_speaks", "start")

            else:
                outdata[:] = b"\x00" * len(outdata)
        else:
            outdata[:] = b"\x00" * len(outdata)
            if bot_state["talking"]:
                print("üîá Sound stopped streaming")
                bot_state["talking"] = False
                if enable_osc:
                    osc_client.send_message("/listen_and_play/bot_speaks", "stop")


    # --- Callback d'entr√©e (capture) ---
    #def callback_send(indata, frames, time_info, status):
        """
        'indata' contient frames * 1 canal mono * 2 octets (int16).
        On l'envoie tel quel sur la socket (via la queue).
        """
    #    send_queue.put(indata)


    def callback_send(indata, frames, time_info, status):
        """
        Capture l'audio, convertit les donn√©es en NumPy et s√©lectionne uniquement le canal voulu.
        """
        # Convertir les donn√©es brutes en numpy array (int16)
        data_np = np.frombuffer(indata, dtype=np.int16)

        # Reshape en (frames, nb_input_channels) pour s√©parer les canaux
        data_np = data_np.reshape((frames, nb_input_channels))

        # S√©lectionner le canal voulu
        selected_channel_data = data_np[:, input_channel]

        # Convertir en binaire avant envoi
        send_queue.put(selected_channel_data.tobytes())

    # --- Thread pour envoyer les donn√©es r√©seau ---
    def send_func(stop_event, send_queue, send_socket):
        while not stop_event.is_set():
            data = send_queue.get()
            if data is None:
                continue
            try:
                send_socket.sendall(data)
            except (socket.error, socket.timeout) as e:
                print(f"Erreur d'envoi : {e}. Reconnexion...")
                send_socket.close()
                send_socket = reconnect_socket(send_socket, host, send_port)

    # --- Thread pour recevoir les donn√©es r√©seau ---
    def recv_func(stop_event, recv_queue, recv_socket):
        """
        On re√ßoit frames*1*2 octets (mono, int16) √† chaque bloc.
        """
        chunk_size = list_play_chunk_size * 1 * 2  # Modifi√© pour mono

        def receive_full_chunk(conn, chunk_size):
            data = b""
            while len(data) < chunk_size:
                packet = conn.recv(chunk_size - len(data))
                if not packet:
                    return None
                data += packet
            return data

        while not stop_event.is_set():
            try:
                data = receive_full_chunk(recv_socket, chunk_size)
                if data:
                    recv_queue.put(data)
            except (socket.error, socket.timeout) as e:
                print(f"Erreur de r√©ception : {e}. Reconnexion...")
                recv_socket.close()
                recv_socket = reconnect_socket(recv_socket, host, recv_port)

    def reconnect_socket(sock, host, port):
        while True:
            try:
                print(f"Tentative de reconnexion √† {host}:{port}...")
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.connect((host, port))
                print(f"Reconnect√© √† {host}:{port}")
                return sock
            except (socket.error, socket.timeout) as e:
                print(f"√âchec de connexion : {e}. Nouvel essai dans 3s...")
                time.sleep(3)

    try:
        print(f"> P√©riph√©rique d'entree' = {input_device_index}, "
              f"ouverture de {nb_input_channels} canaux, flux dans [{input_channel}].")
        print(f"> P√©riph√©rique de sortie = {output_device_index}, "
              f"ouverture de {nb_output_channels} canaux, flux dans [{output_channel}].")

        # -- En entree, on ouvre (input_channel + 1) canaux --
        send_stream = sd.RawInputStream(
            samplerate=send_rate,
            channels=nb_input_channels,  # Modifi√© pour mono
            dtype="int16",
            blocksize=list_play_chunk_size,
            callback=callback_send,
            device=input_device_index,
        )

        # -- En sortie, on ouvre (output_channel + 1) canaux --
        recv_stream = sd.RawOutputStream(
            samplerate=recv_rate,
            channels=nb_output_channels,
            dtype="int16",
            blocksize=list_play_chunk_size,
            callback=callback_recv,
            device=output_device_index,
        )

        # ---- Initialisation des sockets ----
        send_socket = reconnect_socket(socket.socket(socket.AF_INET, socket.SOCK_STREAM), host, send_port)
        recv_socket = reconnect_socket(socket.socket(socket.AF_INET, socket.SOCK_STREAM), host, recv_port)

        # ---- D√©marrer les streams audio ----
        threading.Thread(target=send_stream.start).start()
        threading.Thread(target=recv_stream.start).start()

        # ---- D√©marrer les threads r√©seau ----
        send_thread = threading.Thread(target=send_func, args=(stop_event, send_queue, send_socket))
        send_thread.start()
        recv_thread = threading.Thread(target=recv_func, args=(stop_event, recv_queue, recv_socket))
        recv_thread.start()

        input("Appuyez sur Entr√©e pour arr√™ter...")

    except KeyboardInterrupt:
        print("Fin du streaming (KeyboardInterrupt).")
    except Exception as e:
        print(f"Erreur inattendue: {e}")
    finally:
        stop_event.set()
        # Fermer les sockets
        if 'recv_socket' in locals():
            try:
                recv_socket.shutdown(socket.SHUT_RDWR)
            except Exception:
                pass
            finally:
                recv_socket.close()
        if 'send_socket' in locals():
            send_socket.close()

        # Attendre la fin des threads
        if 'recv_thread' in locals():
            recv_thread.join()
        if 'send_thread' in locals():
            send_thread.join()
        print("Connexion ferm√©e.")


def list_audio_devices():
    devices = sd.query_devices()
    print("=== Liste des p√©riph√©riques audio disponibles ===")
    for i, dev in enumerate(devices):
        print(f"Device index {i}: {dev['name']}")
        print(f"  - Max input channels : {dev['max_input_channels']}")
        print(f"  - Max output channels: {dev['max_output_channels']}")
        print("------------------------------------------------")


if __name__ == "__main__":
    list_audio_devices()
    print()

    parser = HfArgumentParser((ListenAndPlayArguments,))
    (listen_and_play_kwargs,) = parser.parse_args_into_dataclasses()

    listen_and_play(**vars(listen_and_play_kwargs))
